class Solution {
    public int Pos(int arr[],int target){
        int l=0;
        int r=arr.length-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(arr[mid]>=target){
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        return l;
    }
    public int maximumCount(int[] nums) {
      int neg=Pos(nums,0);
      int p=Pos(nums,1);
      int po=nums.length-p;
      return Math.max(neg,po);
    }
}



#max of pos and neg

import java.util.*;

class Solution {
    public int Pos(int arr[], int target) {
        int l = 0;
        int r = arr.length - 1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (arr[mid] >= target) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }

    public int maximumCount(int[] nums) {
        // Assuming nums is sorted
        int neg = Pos(nums, 0);
        int p = Pos(nums, 1);
        int po = nums.length - p;
        return Math.max(neg, po);
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] nums = {-3, -2, -1, 0, 0, 1, 2, 3}; // Example input
        System.out.println(sol.maximumCount(nums));
    }
}
